{"name":"order_query","tagline":"Find next / previous Active Record(s) in one query","body":"# order_query [![Build Status][travis-badge]][travis] [![Code Climate][codeclimate-badge]][codeclimate] [![Coverage Status][coverage-badge]][coverage]\r\n\r\n<a href=\"http://use-the-index-luke.com/no-offset\">\r\n  <img src=\"http://use-the-index-luke.com/img/no-offset.q200.png\" alt=\"100% offset-free\" align=\"right\" width=\"106\" height=\"106\">\r\n</a>\r\n\r\nThis gem finds the next or previous record(s) relative to the current one efficiently using [keyset pagination](http://use-the-index-luke.com/no-offset), e.g. for navigation or infinite scroll.\r\n\r\n## Installation\r\n\r\nAdd to Gemfile:\r\n\r\n```ruby\r\ngem 'order_query', '~> 0.3.2'\r\n```\r\n\r\n## Usage\r\n\r\nDefine a named list of attributes to order by with `order_query(name, *order)`:\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  include OrderQuery\r\n  order_query :order_home,\r\n    [:pinned, [true, false]],\r\n    [:published_at, :desc]\r\nend\r\n```\r\n\r\nEach attributes is specified as:\r\n\r\n1. Attribute name.\r\n2. Optionally, values to order by, such as `%w(high medium low)` or `[true, false]`.\r\n3. Sort direction, `:asc` or `:desc`. Default: `:asc`; `:desc` when values to order by are specified.\r\n4. Options:\r\n\r\n| option     | description                                                                |\r\n|------------|----------------------------------------------------------------------------|\r\n| unique     | Unique attribute. Default: `true` for primary key, `false` otherwise.      |\r\n| sql        | Customize column SQL.                                                      |\r\n\r\nIf no unique column is specified, `[primary_key, :asc]` is used. Unique column must be last.\r\n\r\n### Scopes for `ORDER BY`\r\n\r\n```ruby\r\nPost.published.order_home         #=> #<ActiveRecord::Relation>\r\nPost.published.order_home_reverse #=> #<ActiveRecord::Relation>\r\n```\r\n\r\n### Before / after, previous / next, and position\r\n\r\nFirst, get an `OrderQuery::Point` for the record:\r\n\r\n```ruby\r\np = Post.published.order_home_at(Post.find(31)) #=> #<OrderQuery::Point>\r\n```\r\n\r\nIt exposes these finder methods:\r\n\r\n```ruby\r\np.before   #=> #<ActiveRecord::Relation>\r\np.after    #=> #<ActiveRecord::Relation>\r\np.previous #=> #<Post>\r\np.next     #=> #<Post>\r\np.position #=> 5\r\n```\r\n\r\nLooping to the first / last record is enabled for `next` / `previous` by default. Pass `false` to disable:\r\n\r\n```ruby\r\np = Post.order_home_at(Post.order_home.first)\r\np.previous        #=> #<Post>\r\np.previous(false) #=> nil\r\n```\r\n\r\nEven with looping, `nil` will be returned if there is only one record.\r\n\r\nYou can also get an `OrderQuery::Point` from an instance and a scope:\r\n\r\n```ruby\r\nposts = Post.published\r\npost  = posts.find(42)\r\npost.order_home(posts) #=> #<OrderQuery::Point>\r\n```\r\n\r\n### Dynamic columns\r\n\r\nQuery with dynamic order columns using the `seek(*order)` class method:\r\n\r\n```ruby\r\nspace = Post.visible.seek([:id, :desc]) #=> #<OrderQuery::Space>\r\n```\r\n\r\nThis returns an `OrderQuery::Space` that exposes these methods:\r\n\r\n```ruby\r\nspace.scope           #=> #<ActiveRecord::Relation>\r\nspace.scope_reverse   #=> #<ActiveRecord::Relation>\r\nspace.first           #=> scope.first\r\nspace.last            #=> scope_reverse.first\r\nspace.at(Post.first)  #=> #<OrderQuery::Point>\r\n```\r\n\r\n`OrderQuery::Space` is also available for defined order_queries:\r\n\r\n```ruby\r\nPost.visible.order_home_space #=> #<OrderQuery::Space>\r\n```\r\n\r\nAlternatively, get an `OrderQuery::Point` using the `seek(scope, *order)` instance method:\r\n\r\n```ruby\r\nPost.find(42).seek(Post.visible, [:id, :desc]) #=> #<OrderQuery::Point>\r\n# scope defaults to Post.all\r\nPost.find(42).seek([:id, :desc]) #=> #<OrderQuery::Point>\r\n```\r\n\r\n### Advanced example\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  include OrderQuery\r\n  order_query :order_home,\r\n    # For an array of order values, default direction is :desc\r\n    # High-priority issues will be ordered first in this example\r\n    [:priority, %w(high medium low)],\r\n    # A method and custom SQL can be used instead of an attribute\r\n    [:valid_votes_count, :desc, sql: '(votes - suspicious_votes)'],\r\n    # Default sort order for non-array columns is :asc, just like SQL\r\n    [:updated_at, :desc],\r\n    # pass unique: true for unique attributes to get more optimized queries\r\n    # unique is true by default for primary_key\r\n    [:id, :desc]\r\n  def valid_votes_count\r\n    votes - suspicious_votes\r\n  end\r\nend\r\n```\r\n\r\n## How it works\r\n\r\nInternally this gem builds a query that depends on the current record's values and looks like this:\r\n\r\n```sql\r\n-- Current post: pinned=true published_at='2014-03-21 15:01:35.064096' id=9\r\nSELECT \"posts\".* FROM \"posts\"  WHERE\r\n  (\"posts\".\"pinned\" = 'f' OR\r\n   \"posts\".\"pinned\" = 't' AND (\r\n      \"posts\".\"published_at\" < '2014-03-21 15:01:35.064096' OR\r\n      \"posts\".\"published_at\" = '2014-03-21 15:01:35.064096' AND \"posts\".\"id\" < 9))\r\nORDER BY\r\n  \"posts\".\"pinned\"='t' DESC, \"posts\".\"pinned\"='f' DESC,\r\n  \"posts\".\"published_at\" DESC,\r\n  \"posts\".\"id\" DESC\r\nLIMIT 1\r\n```\r\n\r\nThe actual query is a bit different because `order_query` wraps the top-level `OR` with a (redundant) non-strict column `x0' AND (x0 OR ...)`\r\nfor [performance reasons](https://github.com/glebm/order_query/issues/3).\r\nThis can be disabled with `OrderQuery.wrap_top_level_or = false`.\r\n\r\nSee the implementation in [sql/where.rb](/lib/order_query/sql/where.rb).\r\n\r\nSee how this affects query planning in Markus Winand's slides on [Pagination done the Right Way](http://use-the-index-luke.com/blog/2013-07/pagination-done-the-postgresql-way).\r\n\r\nThis project uses MIT license.\r\n\r\n\r\n[travis]: http://travis-ci.org/glebm/order_query\r\n[travis-badge]: http://img.shields.io/travis/glebm/order_query.svg\r\n[gemnasium]: https://gemnasium.com/glebm/order_query\r\n[codeclimate]: https://codeclimate.com/github/glebm/order_query\r\n[codeclimate-badge]: http://img.shields.io/codeclimate/github/glebm/order_query.svg\r\n[coverage]: https://codeclimate.com/github/glebm/order_query\r\n[coverage-badge]: https://codeclimate.com/github/glebm/order_query/badges/coverage.svg\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}